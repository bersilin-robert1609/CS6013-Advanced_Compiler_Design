//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;
import attributes.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> 
{
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) 
   {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) 
   {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) 
   {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) 
   {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   // Local variables
   HashMap<String, ClassAttr> symbolTable = new HashMap<String, ClassAttr>();
   boolean DEBUG = true;

   int visit; // Pass number

   // Context
   String currClass = null;
   String currMethod = null;

   // Debugging
   void debug(String s) 
   {
      if(DEBUG) System.out.println(s);
   }

   void printAllCFGs()
   {
      for(Map.Entry<String, ClassAttr> entry : symbolTable.entrySet())
      {
         String className = entry.getKey();
         ClassAttr classAttr = entry.getValue();

         for(Map.Entry<String, MethodAttr> entry2 : classAttr.methods.entrySet())
         {
            String methodName = entry2.getKey();
            MethodAttr methodAttr = entry2.getValue();

            System.out.println("Class: " + className + " Method: " + methodName);
            for(Map.Entry<String, CFGNode> entry3 : methodAttr.cfgNodes.entrySet())
            {
               String label = entry3.getKey();
               CFGNode cfgNode = entry3.getValue();

               System.out.println("Label: " + label + " Type: " + cfgNode.type);
               System.out.println("Parent: " + cfgNode.parent + " PosNext: " + cfgNode.posNext + " NegNext: " + cfgNode.negNext);
               System.out.println();
            }
         }
      }
   }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) 
   {
      visit = 0;
      n.f0.accept(this, null);
      n.f1.accept(this, null);

      currClass = null;
      currMethod = null;
      printAllCFGs();

      visit = 1;
      n.f0.accept(this, null);
      n.f1.accept(this, null);

      return null;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> ( VarDeclaration() )*
    * f15 -> ( Statement() )*
    * f16 -> "}"
    * f17 -> "}"
    */
   public R visit(MainClass n, A argu) 
   {
      String className = n.f1.f0.toString();
      String methodName = "main";

      if(visit == 0)
      {
         ClassAttr classAttr = new ClassAttr(className, null);
         symbolTable.put(className, classAttr);

         MethodAttr methodAttr = new MethodAttr(methodName, "void");
         classAttr.methods.put(methodName, methodAttr);

         currClass = className;
         currMethod = methodName;
         
         n.f14.accept(this, null);

         StmtReturn oldReturn = null;
         for(Enumeration<Node> e = n.f15.elements(); e.hasMoreElements();)
         {
            StmtReturn stmtReturn = (StmtReturn)e.nextElement().accept(this, null);

            if(methodAttr.startLabel == null) methodAttr.startLabel = stmtReturn.beginLabel;

            if(oldReturn != null)
            {
               CFGNode currCfgNode = methodAttr.cfgNodes.get(stmtReturn.beginLabel);
               currCfgNode.parent = oldReturn.endLabel;

               CFGNode cfgNode = methodAttr.cfgNodes.get(oldReturn.endLabel);
               cfgNode.posNext = stmtReturn.beginLabel;
            }
            oldReturn = stmtReturn;
         }
      }
      else if(visit == 1)
      {
         currClass = className;
         currMethod = methodName;

         ClassAttr classAttr = symbolTable.get(currClass);
         MethodAttr methodAttr = classAttr.methods.get(currMethod);

         if(methodAttr.startLabel == null) return null;

         String start = methodAttr.startLabel;
         CFGNode startNode = methodAttr.cfgNodes.get(start);

         for(LocalVarAttr localVarAttr : methodAttr.localVars.values())
         {
            startNode.in.put(localVarAttr.name, new LocalVarAttr(localVarAttr));
         }

         startNode.node.accept(this, null);
      }
      
      return null;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) 
   {
      return n.f0.accept(this, argu);
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) 
   {
      String className = n.f1.f0.toString();

      if(visit == 0)
      {
         ClassAttr classAttr = new ClassAttr(className, null);
         symbolTable.put(className, classAttr);

         currClass = className;
         currMethod = null;

         n.f3.accept(this, null);
         n.f4.accept(this, null);
      }

      return null;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) 
   {
      String className = n.f1.f0.toString();
      String parentName = n.f3.f0.toString();

      if(visit == 0)
      {
         ClassAttr classAttr = new ClassAttr(className, parentName);
         symbolTable.put(className, classAttr);

         currClass = className;
         currMethod = null;

         n.f5.accept(this, null);
         n.f6.accept(this, null);
      }

      return null;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) 
   {
      assert(visit == 0 && currClass != null);

      String type = (String)n.f0.accept(this, argu);
      String name = (String)n.f1.accept(this, argu);

      if(currMethod == null) symbolTable.get(currClass).addClassVar(name, type);
      else symbolTable.get(currClass).methods.get(currMethod).addLocalVar(name, type);

      return null;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Identifier()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) 
   {
      String returnType = (String)n.f1.accept(this, argu);
      String methodName = n.f2.f0.toString();

      if(visit == 0)
      {
         ClassAttr classAttr = symbolTable.get(currClass);

         MethodAttr methodAttr = new MethodAttr(methodName, returnType);
         classAttr.methods.put(methodName, methodAttr);
         currMethod = methodName;

         n.f4.accept(this, null);
         n.f7.accept(this, null);
         
         StmtReturn oldReturn = null;
         for(Enumeration<Node> e = n.f8.elements(); e.hasMoreElements();)
         {
            StmtReturn stmtReturn = (StmtReturn)e.nextElement().accept(this, null);
            if(methodAttr.startLabel == null) methodAttr.startLabel = stmtReturn.beginLabel;

            if(oldReturn != null)
            {
               CFGNode currCfgNode = methodAttr.cfgNodes.get(stmtReturn.beginLabel);
               currCfgNode.parent = oldReturn.endLabel;

               CFGNode cfgNode = methodAttr.cfgNodes.get(oldReturn.endLabel);
               cfgNode.posNext = stmtReturn.beginLabel;
            }
            oldReturn = stmtReturn;
         }
      }

      return null;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) 
   {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return null;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) 
   {
      assert(visit == 0 && currClass != null && currMethod != null);

      String type = (String)n.f0.accept(this, argu);
      String name = (String)n.f1.accept(this, argu);

      symbolTable.get(currClass).methods.get(currMethod).addParam(name, type);
      return null;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) 
   {
      return n.f1.accept(this, argu);
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) 
   {
      return n.f0.accept(this, argu);
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) 
   {
      return (R)"int[]";
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) 
   {
      return (R)"boolean";
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) 
   {
      return (R)"int";
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | FieldAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | ForStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) 
   {
      if(visit == 0) return n.f0.accept(this, argu);
      
      return null;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) 
   {
      if(visit == 0)
      {
         MethodAttr methodAttr = symbolTable.get(currClass).methods.get(currMethod);

         StmtReturn returnValue = null;
         StmtReturn oldReturn = null;
         for(Enumeration<Node> e = n.f1.elements(); e.hasMoreElements();)
         {
            StmtReturn stmtReturn = (StmtReturn)e.nextElement().accept(this, argu);
            if(returnValue == null) returnValue = stmtReturn;
            if(oldReturn != null)
            {
               CFGNode currCfgNode = methodAttr.cfgNodes.get(stmtReturn.beginLabel);
               currCfgNode.parent = oldReturn.endLabel;

               CFGNode cfgNode = methodAttr.cfgNodes.get(oldReturn.endLabel);
               cfgNode.posNext = stmtReturn.beginLabel;
            }
            oldReturn = stmtReturn;
         }
         returnValue.endLabel = oldReturn.endLabel;
         return (R)returnValue;
      }
      return null;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) 
   {
      if(visit == 0)
      {
         MethodAttr methodAttr = symbolTable.get(currClass).methods.get(currMethod);

         String label = methodAttr.getNextLabel();
         CFGNode cfgNode = new CFGNode(StatementType.ASSIGN, n, label);
         methodAttr.cfgNodes.put(label, cfgNode);

         return (R)new StmtReturn(label, label);
      }

      return null;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Identifier()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Identifier()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) 
   {
      if(visit == 0)
      {
         MethodAttr methodAttr = symbolTable.get(currClass).methods.get(currMethod);

         String label = methodAttr.getNextLabel();
         CFGNode cfgNode = new CFGNode(StatementType.ARRAY_ASSIGN, n, label);
         methodAttr.cfgNodes.put(label, cfgNode);

         return (R)new StmtReturn(label, label);
      }

      return null;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> Identifier()
    * f5 -> ";"
    */
   public R visit(FieldAssignmentStatement n, A argu) 
   {
      if(visit == 0)
      {
         MethodAttr methodAttr = symbolTable.get(currClass).methods.get(currMethod);

         String label = methodAttr.getNextLabel();
         CFGNode cfgNode = new CFGNode(StatementType.FIELD_ASSIGN, n, label);
         methodAttr.cfgNodes.put(label, cfgNode);

         return (R)new StmtReturn(label, label);
      }

      return null;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfStatement n, A argu) 
   {
      if(visit == 0)
      {
         MethodAttr methodAttr = symbolTable.get(currClass).methods.get(currMethod);

         String label = methodAttr.getNextLabel();
         CFGNode cfgNode = new CFGNode(StatementType.IF_ELSE, n, label);
         methodAttr.cfgNodes.put(label, cfgNode);

         String labelDummy = methodAttr.getNextLabel();
         CFGNode cfgNodeDummy = new CFGNode(StatementType.NOP, null, labelDummy);
         methodAttr.cfgNodes.put(labelDummy, cfgNodeDummy);

         StmtReturn stmtReturnPos = (StmtReturn)n.f4.accept(this, argu);
         StmtReturn stmtReturnNeg = (StmtReturn)n.f6.accept(this, argu);

         cfgNode.posNext = stmtReturnPos.beginLabel;
         methodAttr.cfgNodes.get(stmtReturnPos.endLabel).posNext = labelDummy;
         methodAttr.cfgNodes.get(stmtReturnPos.beginLabel).parent = label;

         cfgNode.negNext = stmtReturnNeg.beginLabel;
         methodAttr.cfgNodes.get(stmtReturnNeg.endLabel).posNext = labelDummy;
         methodAttr.cfgNodes.get(stmtReturnNeg.beginLabel).parent = label;

         return (R)new StmtReturn(label, labelDummy);
      }

      return null;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) 
   {
      if(visit == 0)
      {
         MethodAttr methodAttr = symbolTable.get(currClass).methods.get(currMethod);

         String label = methodAttr.getNextLabel();
         CFGNode cfgNode = new CFGNode(StatementType.WHILE, n, label);
         methodAttr.cfgNodes.put(label, cfgNode);

         String labelDummy = methodAttr.getNextLabel();
         CFGNode cfgNodeDummy = new CFGNode(StatementType.NOP, null, labelDummy);
         methodAttr.cfgNodes.put(labelDummy, cfgNodeDummy);

         StmtReturn stmtReturn = (StmtReturn)n.f4.accept(this, argu);
         cfgNode.posNext = stmtReturn.beginLabel;
         methodAttr.cfgNodes.get(stmtReturn.endLabel).posNext = label;
         methodAttr.cfgNodes.get(stmtReturn.beginLabel).parent = label;

         cfgNode.negNext = labelDummy;
         return (R)new StmtReturn(label, labelDummy);
      }

      return null;
   }

   /**
    * f0 -> "for"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> Expression()
    * f5 -> ";"
    * f6 -> Expression()
    * f7 -> ";"
    * f8 -> Identifier()
    * f9 -> "="
    * f10 -> Expression()
    * f11 -> ")"
    * f12 -> Statement()
    */
   public R visit(ForStatement n, A argu) 
   {
      if(visit == 0)
      {
         MethodAttr methodAttr = symbolTable.get(currClass).methods.get(currMethod);

         String label = methodAttr.getNextLabel();
         CFGNode cfgNode = new CFGNode(StatementType.FOR, n, label);
         methodAttr.cfgNodes.put(label, cfgNode);

         String labelDummy = methodAttr.getNextLabel();
         CFGNode cfgNodeDummy = new CFGNode(StatementType.NOP, null, labelDummy);
         methodAttr.cfgNodes.put(labelDummy, cfgNodeDummy);

         StmtReturn stmtReturn = (StmtReturn)n.f12.accept(this, argu);
         cfgNode.posNext = stmtReturn.beginLabel;
         methodAttr.cfgNodes.get(stmtReturn.endLabel).posNext = label;
         methodAttr.cfgNodes.get(stmtReturn.beginLabel).parent = label;

         cfgNode.negNext = labelDummy;
         return (R)new StmtReturn(label, labelDummy);
      }

      return null;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) 
   {
      if(visit == 0)
      {
         MethodAttr methodAttr = symbolTable.get(currClass).methods.get(currMethod);

         String label = methodAttr.getNextLabel();
         CFGNode cfgNode = new CFGNode(StatementType.PRINT, n, label);
         methodAttr.cfgNodes.put(label, cfgNode);

         return (R)new StmtReturn(label, label);
      }

      return null;
   }

   /**
    * f0 -> AndExpression()
    *       | CompareExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | FieldRead()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "&"
    * f2 -> Identifier()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "<"
    * f2 -> Identifier()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "+"
    * f2 -> Identifier()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "-"
    * f2 -> Identifier()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "*"
    * f2 -> Identifier()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Identifier()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    */
   public R visit(FieldRead n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ArgList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( ArgRest() )*
    */
   public R visit(ArgList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(ArgRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) 
   {
      return (R)n.f0.tokenImage;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) 
   {
      return (R)n.f0.tokenImage;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) 
   {
      return (R)n.f0.tokenImage;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) 
   {
      return (R)n.f0.tokenImage;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) 
   {
      return (R)n.f0.tokenImage;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Identifier()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Identifier()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
