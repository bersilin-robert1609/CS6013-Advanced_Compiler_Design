//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;
import attributes.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> 
{
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) 
   {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) 
   {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) 
   {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) 
   {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   // Local variables
   HashMap<String, ClassAttr> symbolTable = new HashMap<String, ClassAttr>();
   boolean DEBUG = true;

   int visit; // Pass number

   // Context
   String currClass = null;
   String currMethod = null;

   // Debugging
   void debug(String s) 
   {
      if(DEBUG) System.out.println(s);
   }

   VarAttr getType(String varName, String className, String methodName)
   {
      ClassAttr classAttr = symbolTable.get(className);
      MethodAttr methodAttr = classAttr.methods.get(methodName);

      if(methodAttr.localVars.containsKey(varName)) return methodAttr.localVars.get(varName);
      else if(methodAttr.params.containsKey(varName)) return methodAttr.params.get(varName);
      else if(classAttr.classVars.containsKey(varName)) return classAttr.classVars.get(varName);
      else
      {
         String parentName = classAttr.parent;
         while(parentName != null)
         {
            classAttr = symbolTable.get(parentName);
            if(classAttr.classVars.containsKey(varName)) return classAttr.classVars.get(varName);
            parentName = classAttr.parent;
         }
      }

      assert(false); // Should never reach here
      return null;
   }

   void processNode(CFGNode cfgNode)
   {
      if(cfgNode == null) return;

      if(cfgNode.type == StatementType.NOP)
      {
         cfgNode.dataFlowMeet();
         cfgNode.out = cfgNode.in;

         processNode(cfgNode.posNext);
         return;
      }
      cfgNode.node.accept(this, (A)cfgNode);
      return;
   }
   
   void copyDataFlow(HashMap<String, VarAttr> src, HashMap<String, VarAttr> dest)
   {
      dest.clear();
      for(VarAttr varAttr : src.values()) dest.put(varAttr.name, new VarAttr(varAttr));
   }

   /**
    * Returns True if the src and dest sets are different
    * Copies the src set to dest set
    */
   boolean checkCopyDF(HashMap<String, VarAttr> src, HashMap<String, VarAttr> dest)
   {
      boolean check = false; // assume same
      for(VarAttr varAttr : src.values())
      {
         VarAttr destVarAttr = dest.get(varAttr.name);
         if(varAttr.isSame(destVarAttr) == false) check = true; // different
         dest.put(varAttr.name, new VarAttr(varAttr));
      }
      return check;
   }

   void out(String s)
   {
      System.out.println(s);
   }

   boolean isLocalConst(String variable, CFGNode cfgNode)
   {
      VarAttr varAttr = getType(variable, currClass, currMethod);
      return (varAttr.varType == VarType.LOCALVAR && cfgNode.in.get(variable).isConstant());
   }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) 
   {
      visit = 0;
      n.f0.accept(this, null);
      n.f1.accept(this, null);

      currClass = null;
      currMethod = null;

      visit = 1;
      n.f0.accept(this, null);
      n.f1.accept(this, null);

      currClass = null;
      currMethod = null;

      visit = 2;
      n.f0.accept(this, null);
      n.f1.accept(this, null);

      return null;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> ( VarDeclaration() )*
    * f15 -> ( Statement() )*
    * f16 -> "}"
    * f17 -> "}"
    */
   public R visit(MainClass n, A argu) 
   {
      String className = n.f1.f0.toString();
      String methodName = n.f6.toString();
      String returnType = n.f5.toString();

      if(visit == 0)
      {
         ClassAttr classAttr = new ClassAttr(className, null);
         symbolTable.put(className, classAttr);

         MethodAttr methodAttr = new MethodAttr(methodName, returnType);
         classAttr.methods.put(methodName, methodAttr);

         currClass = className;
         currMethod = methodName;
         
         n.f14.accept(this, null);

         StmtReturn oldReturn = null;
         for(Enumeration<Node> e = n.f15.elements(); e.hasMoreElements();)
         {
            StmtReturn stmtReturn = (StmtReturn)e.nextElement().accept(this, null);

            if(methodAttr.startNode == null) methodAttr.setStartNode(stmtReturn.beginNode);

            if(oldReturn != null)
            {
               stmtReturn.beginNode.setParent1(oldReturn.endNode);
               oldReturn.endNode.setPosNext(stmtReturn.beginNode);
            }
            oldReturn = stmtReturn;
         }
      }
      else if(visit == 1)
      {
         currClass = className;
         currMethod = methodName;

         processNode(symbolTable.get(className).methods.get(methodName).startNode);
      }
      else 
      {
         // Printing Pass
         currClass = className;
         currMethod = methodName;
         
         String output = "class " + className + "{\n" + "public static void main(String[] " + n.f11.f0.toString() + ")\n{\n";
         String varDecl = "";
         for(VarAttr methodVarAttr : symbolTable.get(className).methods.get(methodName).localVars.values())
         {
            varDecl += methodVarAttr.dtype + " " + methodVarAttr.name + ";\n";
         }
         
         out(output);
         out(varDecl);
         
         processNode(symbolTable.get(className).methods.get(methodName).startNode);

         out("}\n}");
      }
      
      return null;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) 
   {
      return n.f0.accept(this, argu);
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) 
   {
      String className = n.f1.f0.toString();

      if(visit == 0)
      {
         ClassAttr classAttr = new ClassAttr(className, null);
         symbolTable.put(className, classAttr);

         currClass = className;
         currMethod = null;

         n.f3.accept(this, null);
         n.f4.accept(this, null);
      }
      else if(visit == 1)
      {
         currClass = className;
         currMethod = null;

         n.f4.accept(this, null);
      }
      else
      {
         // Printing Pass
         currClass = className;
         currMethod = null;

         String output = "class " + className + "{\n";
         String varDecl = "";
         for(VarAttr classVarAttr : symbolTable.get(className).classVars.values())
         {
            varDecl += classVarAttr.dtype + " " + classVarAttr.name + ";\n";
         }
         
         out(output);
         out(varDecl);
         
         n.f4.accept(this, null);

         out("}");
      }

      return null;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) 
   {
      String className = n.f1.f0.toString();
      String parentName = n.f3.f0.toString();

      if(visit == 0)
      {
         ClassAttr classAttr = new ClassAttr(className, parentName);
         symbolTable.put(className, classAttr);

         currClass = className;
         currMethod = null;

         n.f5.accept(this, null);
         n.f6.accept(this, null);
      }
      else if(visit == 1)
      {
         currClass = className;
         currMethod = null;

         n.f6.accept(this, null);
      }
      else
      {
         // Printing Pass
         currClass = className;
         currMethod = null;

         String output = "class " + className + " extends " + parentName + "{\n";
         String varDecl = "";
         for(VarAttr classVarAttr : symbolTable.get(className).classVars.values())
         {
            varDecl += classVarAttr.dtype + " " + classVarAttr.name + ";\n";
         }
         
         out(output);
         out(varDecl);
         
         n.f6.accept(this, null);

         out("}");
      }

      return null;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) 
   {
      assert(visit == 0 && currClass != null);

      String type = (String)n.f0.accept(this, argu);
      String name = n.f1.f0.toString();

      if(currMethod == null) symbolTable.get(currClass).addClassVar(name, type);
      else symbolTable.get(currClass).methods.get(currMethod).addLocalVar(name, type);

      return null;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Identifier()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) 
   {
      String returnType = (String)n.f1.accept(this, argu);
      String methodName = n.f2.f0.toString();

      if(visit == 0)
      {
         ClassAttr classAttr = symbolTable.get(currClass);

         MethodAttr methodAttr = new MethodAttr(methodName, returnType);
         classAttr.methods.put(methodName, methodAttr);
         currMethod = methodName;

         n.f4.accept(this, null);
         n.f7.accept(this, null);
         
         StmtReturn oldReturn = null;
         for(Enumeration<Node> e = n.f8.elements(); e.hasMoreElements();)
         {
            StmtReturn stmtReturn = (StmtReturn)e.nextElement().accept(this, null);
            
            if(methodAttr.startNode == null) methodAttr.setStartNode(stmtReturn.beginNode);

            if(oldReturn != null)
            {
               stmtReturn.beginNode.setParent1(oldReturn.endNode);
               oldReturn.endNode.setPosNext(stmtReturn.beginNode);
            }
            oldReturn = stmtReturn;
         }
         if(oldReturn != null) methodAttr.endNode = oldReturn.endNode;
      }
      else if(visit == 1)
      {
         currMethod = methodName;
         
         processNode(symbolTable.get(currClass).methods.get(currMethod).startNode);
      }
      else 
      {
         // Printing Pass
         currMethod = methodName;

         String output = "public " + returnType + " " + methodName + "(";
         String paramList = "";
         for(VarAttr param : symbolTable.get(currClass).methods.get(currMethod).params.values())
         {
            paramList += param.dtype + " " + param.name + ", ";
         }
         if(paramList.length() > 0) paramList = paramList.substring(0, paramList.length() - 2);
         output += paramList + ")\n{\n";

         String varDecl = "";
         for(VarAttr localVar : symbolTable.get(currClass).methods.get(currMethod).localVars.values())
         {
            varDecl += localVar.dtype + " " + localVar.name + ";\n";
         }

         out(output);
         out(varDecl);

         processNode(symbolTable.get(currClass).methods.get(currMethod).startNode);

         MethodAttr methodAttr = symbolTable.get(currClass).methods.get(currMethod);

         String returnValue = n.f10.f0.toString();
         if(methodAttr.endNode != null)
         {
            VarAttr returnVar = getType(returnValue, currClass, currMethod);
            if(returnVar.varType == VarType.LOCALVAR && methodAttr.endNode.out.get(returnValue).isConstant()) returnValue = methodAttr.endNode.out.get(returnValue).value;
         }

         out("return " + returnValue + ";");
         out("}");
      }

      return null;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) 
   {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return null;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) 
   {
      assert(visit == 0 && currClass != null && currMethod != null);

      String type = (String)n.f0.accept(this, argu);
      String name = n.f1.f0.toString();

      symbolTable.get(currClass).methods.get(currMethod).addParam(name, type);
      return null;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) 
   {
      return n.f1.accept(this, argu);
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) 
   {
      return n.f0.accept(this, argu);
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) 
   {
      return (R)"int[]";
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) 
   {
      return (R)"boolean";
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) 
   {
      return (R)"int";
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | FieldAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | ForStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) 
   {
      if(visit == 0) return n.f0.accept(this, argu);

      return null;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) 
   {
      if(visit == 0)
      {
         if(n.f1.size() == 0)
         {
            // Empty block
            CFGNode cfgNode = new CFGNode(StatementType.NOP, null, currClass, currMethod, symbolTable);
            return (R)new StmtReturn(cfgNode, cfgNode);
         }
         
         StmtReturn returnValue = null;
         StmtReturn oldReturn = null;
         for(Enumeration<Node> e = n.f1.elements(); e.hasMoreElements();)
         {
            StmtReturn stmtReturn = (StmtReturn)e.nextElement().accept(this, argu);
            if(returnValue == null) returnValue = stmtReturn;
            if(oldReturn != null)
            {
               stmtReturn.beginNode.setParent1(oldReturn.endNode);
               oldReturn.endNode.setPosNext(stmtReturn.beginNode);
            }
            oldReturn = stmtReturn;
         }
         returnValue.endNode = oldReturn.endNode;
         return (R)returnValue;
      }
      return null;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) 
   {
      if(visit == 0)
      {
         CFGNode cfgNode = new CFGNode(StatementType.ASSIGN, n, currClass, currMethod, symbolTable);
         return (R)new StmtReturn(cfgNode, cfgNode);
      }
      else if(visit == 1)
      {         
         CFGNode cfgNode = (CFGNode)argu;
         cfgNode.dataFlowMeet();
         copyDataFlow(cfgNode.in, cfgNode.out);

         // Special Processing
         String varName = n.f0.f0.tokenImage;
         VarAttr type = getType(varName, currClass, currMethod);
         ExprReturn exprReturn = (ExprReturn)n.f2.accept(this, argu);

         if(type.varType == VarType.LOCALVAR && (type.dtype == "int" || type.dtype =="boolean"))
         {
            if(exprReturn.isConst) cfgNode.out.get(varName).setConstant(exprReturn.value);
            else cfgNode.out.get(varName).setBottom();
         }
         processNode(cfgNode.posNext);
      }
      else
      {
         // Printing Pass
         CFGNode cfgNode = (CFGNode)argu;
         String varName = n.f0.f0.tokenImage;
         ExprReturn exprReturn = (ExprReturn)n.f2.accept(this, argu);

         out(varName + " = " + exprReturn.value + ";");
         processNode(cfgNode.posNext);
      }

      return null;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Identifier()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Identifier()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) 
   {
      if(visit == 0)
      {
         CFGNode cfgNode = new CFGNode(StatementType.ARRAY_ASSIGN, n, currClass, currMethod, symbolTable);
         return (R)new StmtReturn(cfgNode, cfgNode);
      }
      else if(visit == 1)
      {
         CFGNode cfgNode = (CFGNode)argu;
         cfgNode.dataFlowMeet();
         copyDataFlow(cfgNode.in, cfgNode.out);

         // No special processing required for array assignment

         processNode(cfgNode.posNext);
      }
      else 
      {
         // Printing Pass
         CFGNode cfgNode = (CFGNode)argu;
         String varName = n.f0.f0.tokenImage;
         String indexName = n.f2.f0.tokenImage;
         String valueName = n.f5.f0.tokenImage;

         VarAttr indexType = getType(indexName, currClass, currMethod);
         VarAttr valueType = getType(valueName, currClass, currMethod);

         if(indexType.varType == VarType.LOCALVAR &&  cfgNode.in.get(indexName).isConstant()) indexName = cfgNode.in.get(indexName).value;
         if(valueType.varType == VarType.LOCALVAR &&  cfgNode.in.get(valueName).isConstant()) valueName = cfgNode.in.get(valueName).value;

         out(varName + "[" + indexName + "] = " + valueName + ";");
         processNode(cfgNode.posNext);
      }

      return null;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> Identifier()
    * f5 -> ";"
    */
   public R visit(FieldAssignmentStatement n, A argu) 
   {
      if(visit == 0)
      {
         CFGNode cfgNode = new CFGNode(StatementType.FIELD_ASSIGN, n, currClass, currMethod, symbolTable);
         return (R)new StmtReturn(cfgNode, cfgNode);
      }
      else if(visit == 1)
      {
         CFGNode cfgNode = (CFGNode)argu;
         cfgNode.dataFlowMeet();
         copyDataFlow(cfgNode.in, cfgNode.out);

         // No special processing required for field assignment

         processNode(cfgNode.posNext);
      }
      else
      {
         // Printing Pass
         CFGNode cfgNode = (CFGNode)argu;
         String varName = n.f0.f0.tokenImage;
         String fieldName = n.f2.f0.tokenImage;
         String valueName = n.f4.f0.tokenImage;

         VarAttr valueType = getType(valueName, currClass, currMethod);
         if(valueType.varType == VarType.LOCALVAR &&  cfgNode.in.get(valueName).isConstant()) valueName = cfgNode.in.get(valueName).value;

         out(varName + "." + fieldName + " = " + valueName + ";");
         processNode(cfgNode.posNext);
      }

      return null;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfStatement n, A argu) 
   {
      if(visit == 0)
      {
         CFGNode cfgNode = new CFGNode(StatementType.IF_ELSE, n, currClass, currMethod, symbolTable);
         CFGNode cfgNodeDummy = new CFGNode(StatementType.NOP, null, currClass, currMethod, symbolTable);

         StmtReturn stmtReturn1 = (StmtReturn)n.f4.accept(this, argu);
         StmtReturn stmtReturn2 = (StmtReturn)n.f6.accept(this, argu);

         stmtReturn1.beginNode.setParents(cfgNode, null);
         stmtReturn2.beginNode.setParents(cfgNode, null);

         // Stmt1.endNode and Stmt2.endNode will not have posNext it will return here

         cfgNode.ifDummy = cfgNodeDummy;

         cfgNode.setNexts(stmtReturn1.beginNode, stmtReturn2.beginNode);
         cfgNodeDummy.setParents(stmtReturn1.endNode, stmtReturn2.endNode);

         return (R)new StmtReturn(cfgNode, cfgNodeDummy);
      }
      else if(visit == 1)
      {
         CFGNode cfgNode = (CFGNode)argu;
         cfgNode.dataFlowMeet();
         copyDataFlow(cfgNode.in, cfgNode.out);
         
         // Special Processing
         String condName = n.f2.f0.tokenImage;
         VarAttr type = getType(condName, currClass, currMethod);

         if(type.varType == VarType.LOCALVAR && cfgNode.in.get(condName).isConstant())
         {
            // Conditional constant propagation
            // Constant condition value - do only True or False branch

            CFGNode next = null;
            if(cfgNode.in.get(condName).value.equals("true")) next = cfgNode.posNext;
            else next = cfgNode.negNext;

            processNode(next);
         }
         else
         {
            // Simple case - do both branches
            
            processNode(cfgNode.posNext);
            processNode(cfgNode.negNext);
         }
         processNode(cfgNode.ifDummy);
      }
      else
      {
         // Printing Pass

         CFGNode cfgNode = (CFGNode)argu;
         String condName = n.f2.f0.tokenImage;

         VarAttr condType = getType(condName, currClass, currMethod);
         if(condType.varType == VarType.LOCALVAR && cfgNode.in.get(condName).isConstant()) condName = cfgNode.in.get(condName).value;

         out("if(" + condName + ")");
         out("{");
         processNode(cfgNode.posNext);
         out("}");
         out("else");
         out("{");
         processNode(cfgNode.negNext);
         out("}");

         processNode(cfgNode.ifDummy);
      }

      return null;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) 
   {
      if(visit == 0)
      {
         CFGNode cfgNode = new CFGNode(StatementType.WHILE, n, currClass, currMethod, symbolTable);
         CFGNode cfgNodeDummy = new CFGNode(StatementType.NOP, null, currClass, currMethod, symbolTable);

         StmtReturn stmtReturn = (StmtReturn)n.f4.accept(this, argu);
         stmtReturn.beginNode.setParents(cfgNode, null);
         //Stmt.endNode will not have posNext it will return here

         cfgNode.setParent2(stmtReturn.endNode);
         cfgNode.setNexts(stmtReturn.beginNode, cfgNodeDummy);

         cfgNodeDummy.setParents(cfgNode, null);

         return (R)new StmtReturn(cfgNode, cfgNodeDummy);
      }
      else if(visit == 1)
      {
         CFGNode cfgNode = (CFGNode)argu;
         cfgNode.dataFlowMeet();
         copyDataFlow(cfgNode.in, cfgNode.out);

         // Special Processing
         String condName = n.f2.f0.tokenImage;
         VarAttr type = getType(condName, currClass, currMethod);

         if(type.varType == VarType.LOCALVAR)
         {
            // Conditional constant propagation
            
            while(cfgNode.in.get(condName).isConstant() && cfgNode.in.get(condName).value.equals("true"))
            {
               processNode(cfgNode.posNext);
               cfgNode.dataFlowMeet();

               if(checkCopyDF(cfgNode.in, cfgNode.out) == false) break; // false = same
            }

            if(cfgNode.in.get(condName).isConstant() == false)
            {
               do
               {
                  processNode(cfgNode.posNext);
                  cfgNode.dataFlowMeet();
               }
               while(checkCopyDF(cfgNode.in, cfgNode.out)); // true = different
            }
         
            copyDataFlow(cfgNode.in, cfgNode.out);
         }
         else
         {
            do
            {
               processNode(cfgNode.posNext);
               cfgNode.dataFlowMeet();
            }
            while(checkCopyDF(cfgNode.in, cfgNode.out));
         }

         processNode(cfgNode.negNext);
      }
      else 
      {
         // Printing Pass

         CFGNode cfgNode = (CFGNode)argu;
         String condName = n.f2.f0.tokenImage;
         VarAttr condType = getType(condName, currClass, currMethod);

         if(condType.varType == VarType.LOCALVAR && cfgNode.in.get(condName).isConstant()) condName = cfgNode.in.get(condName).value;

         if(!condName.equals("false")) // if not false
         {
            out("while(" + condName + ")");
            out("{");
            processNode(cfgNode.posNext);
            out("}");
         }

         processNode(cfgNode.negNext);
      }

      return null;
   }

   /**
    * f0 -> "for"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> Expression()
    * f5 -> ";"
    * f6 -> Expression()
    * f7 -> ";"
    * f8 -> Identifier()
    * f9 -> "="
    * f10 -> Expression()
    * f11 -> ")"
    * f12 -> Statement()
    */
   public R visit(ForStatement n, A argu) 
   {
      if(visit == 0)
      {
         CFGNode cfgNodeInit = new CFGNode(StatementType.FORINIT, n, currClass, currMethod, symbolTable);
         CFGNode cfgNode = new CFGNode(StatementType.FORCOND, null, currClass, currMethod, symbolTable);
         CFGNode cfgNodeDummy = new CFGNode(StatementType.NOP, null, currClass, currMethod, symbolTable);

         StmtReturn stmtReturn = (StmtReturn)n.f12.accept(this, argu);
         stmtReturn.beginNode.setParents(cfgNode, null);
         // Stmt.endNode will not have posNext it will return here

         cfgNode.setParents(cfgNodeInit, stmtReturn.endNode);
         cfgNode.setNexts(stmtReturn.beginNode, cfgNodeDummy);

         cfgNodeInit.setNexts(cfgNode, null);

         cfgNodeDummy.setParents(cfgNode, null);
         
         return (R)new StmtReturn(cfgNodeInit, cfgNodeDummy);
      }
      else if(visit == 1)
      {
         CFGNode cfgNodeInit = (CFGNode)argu;
         CFGNode cfgNode = cfgNodeInit.posNext;

         cfgNodeInit.dataFlowMeet();
         copyDataFlow(cfgNodeInit.in, cfgNodeInit.out);

         // Iterator Initialization
         String varName = n.f2.f0.tokenImage;
         VarAttr type = getType(varName, currClass, currMethod);
         ExprReturn exprReturn1 = (ExprReturn)n.f4.accept(this, (A)cfgNodeInit);

         if(type.varType == VarType.LOCALVAR && exprReturn1.isConst) cfgNodeInit.out.get(varName).setConstant(exprReturn1.value);
         else cfgNodeInit.out.get(varName).setBottom();

         cfgNode.dataFlowMeet();
         copyDataFlow(cfgNode.in, cfgNode.out);

         // Calculate Condition
         ExprReturn condExprReturn = (ExprReturn)n.f6.accept(this, (A)cfgNode);

         // if the expression is constant
         while(condExprReturn.isConst && condExprReturn.value.equals("true"))
         {
            processNode(cfgNode.posNext);
            cfgNode.dataFlowMeet();

            String changeVar = n.f8.f0.tokenImage;
            VarAttr changeType = getType(changeVar, currClass, currMethod);
            ExprReturn exprReturn2 = (ExprReturn)n.f10.accept(this, (A)cfgNode);

            if(changeType.varType == VarType.LOCALVAR && exprReturn2.isConst) cfgNode.in.get(changeVar).setConstant(exprReturn2.value);
            else cfgNode.in.get(changeVar).setBottom();

            if(checkCopyDF(cfgNode.in, cfgNode.out) == false) break; // No change

            condExprReturn = (ExprReturn)n.f6.accept(this, (A)cfgNode);
         }

         if(!condExprReturn.isConst)
         {
            // if the expression is not constant (2 cases - non const from beginning and non const after some iterations)
            do
            {
               processNode(cfgNode.posNext);
               cfgNode.dataFlowMeet();
   
               String changeVar = n.f8.f0.tokenImage;
               VarAttr changeType = getType(changeVar, currClass, currMethod);
               ExprReturn exprReturn2 = (ExprReturn)n.f10.accept(this, (A)cfgNode);

               if(changeType.varType == VarType.LOCALVAR && exprReturn2.isConst) cfgNode.in.get(changeVar).setConstant(exprReturn2.value);
               else cfgNode.in.get(changeVar).setBottom();
            }
            while(checkCopyDF(cfgNode.in, cfgNode.out));
         }

         processNode(cfgNode.negNext);
      }
      else
      {
         // Printing Pass

         CFGNode cfgNodeInit = (CFGNode)argu;
         CFGNode cfgNode = cfgNodeInit.posNext;

         ExprReturn exprReturn1 = (ExprReturn)n.f4.accept(this, (A)cfgNodeInit);
         ExprReturn exprReturn2 = (ExprReturn)n.f6.accept(this, (A)cfgNode);
         ExprReturn exprReturn3 = (ExprReturn)n.f10.accept(this, (A)cfgNode);

         String var1 = n.f2.f0.tokenImage;
         String var2 = n.f8.f0.tokenImage;

         out("for(" + var1 + " = " + exprReturn1.value + "; " + exprReturn2.value + "; " + var2 + " = " + exprReturn3.value + ")");
         out("{");
         processNode(cfgNode.posNext);
         out("}");

         processNode(cfgNode.negNext);
      }

      return null;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) 
   {
      if(visit == 0)
      {
         CFGNode cfgNode = new CFGNode(StatementType.PRINT, n, currClass, currMethod, symbolTable);
         return (R)new StmtReturn(cfgNode, cfgNode);
      }
      else if(visit == 1)
      {
         CFGNode cfgNode = (CFGNode)argu;
         cfgNode.dataFlowMeet();
         copyDataFlow(cfgNode.in, cfgNode.out);

         // No special processing required for print statement

         processNode(cfgNode.posNext);
      }
      else 
      {
         // Printing Pass
         CFGNode cfgNode = (CFGNode)argu;
         String varName = n.f2.f0.tokenImage;

         VarAttr type = getType(varName, currClass, currMethod);
         if(type.varType == VarType.LOCALVAR && cfgNode.in.get(varName).isConstant()) varName = cfgNode.in.get(varName).value;

         out("System.out.println(" + varName + ");");
         processNode(cfgNode.posNext);
      }

      return null;
   }

   /**
    * f0 -> AndExpression()
    *       | CompareExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | FieldRead()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) 
   {
      return n.f0.accept(this, argu);
   }

   /**
    * f0 -> Identifier()
    * f1 -> "&"
    * f2 -> Identifier()
    */
   public R visit(AndExpression n, A argu) 
   {
      CFGNode cfgNode = (CFGNode)argu;

      String var1 = n.f0.f0.tokenImage;
      String var2 = n.f2.f0.tokenImage;

      String value = null;
      boolean constType = false;
      if(isLocalConst(var1, cfgNode) && isLocalConst(var2, cfgNode))
      {
         value = (Boolean.parseBoolean(cfgNode.in.get(var1).value) & Boolean.parseBoolean(cfgNode.in.get(var2).value)) + "";
         constType = true;
      }
      else if(isLocalConst(var1, cfgNode))
      {
         value = (Boolean.parseBoolean(cfgNode.in.get(var1).value)) + " & " + var2;
      }
      else if(isLocalConst(var2, cfgNode))
      {
         value = var1 + " & " + (Boolean.parseBoolean(cfgNode.in.get(var2).value)) + "";
      }
      else value = var1 + " & " + var2;

      return (R)new ExprReturn(constType, value);
   }

   /**
    * f0 -> Identifier()
    * f1 -> "<"
    * f2 -> Identifier()
    */
   public R visit(CompareExpression n, A argu) 
   {
      CFGNode cfgNode = (CFGNode)argu;

      String var1 = n.f0.f0.tokenImage;
      String var2 = n.f2.f0.tokenImage;

      String value = null;
      boolean constType = false;
      if(isLocalConst(var1, cfgNode) && isLocalConst(var2, cfgNode))
      {
         value = (Integer.parseInt(cfgNode.in.get(var1).value) < Integer.parseInt(cfgNode.in.get(var2).value)) + "";
         constType = true;
      }
      else if(isLocalConst(var1, cfgNode))
      {
         value = (Integer.parseInt(cfgNode.in.get(var1).value)) + " < " + var2;
      }
      else if(isLocalConst(var2, cfgNode))
      {
         value = var1 + " < " + (Integer.parseInt(cfgNode.in.get(var2).value)) + "";
      }
      else value = var1 + " < " + var2;

      return (R)new ExprReturn(constType, value);
   }

   /**
    * f0 -> Identifier()
    * f1 -> "+"
    * f2 -> Identifier()
    */
   public R visit(PlusExpression n, A argu) 
   {
      CFGNode cfgNode = (CFGNode)argu;

      String var1 = n.f0.f0.tokenImage;
      String var2 = n.f2.f0.tokenImage;

      String value = null;
      boolean constType = false;
      if(isLocalConst(var1, cfgNode) && isLocalConst(var2, cfgNode))
      {
         value = (Integer.parseInt(cfgNode.in.get(var1).value) + Integer.parseInt(cfgNode.in.get(var2).value)) + "";
         constType = true;
      }
      else if(isLocalConst(var1, cfgNode))
      {
         value = (Integer.parseInt(cfgNode.in.get(var1).value)) + " + " + var2;
      }
      else if(isLocalConst(var2, cfgNode))
      {
         value = var1 + " + " + (Integer.parseInt(cfgNode.in.get(var2).value)) + "";
      }
      else value = var1 + " + " + var2;

      return (R)new ExprReturn(constType, value);
   }

   /**
    * f0 -> Identifier()
    * f1 -> "-"
    * f2 -> Identifier()
    */
   public R visit(MinusExpression n, A argu) 
   {
      CFGNode cfgNode = (CFGNode)argu;

      String var1 = n.f0.f0.tokenImage;
      String var2 = n.f2.f0.tokenImage;

      String value = null;
      boolean constType = false;
      if(isLocalConst(var1, cfgNode) && isLocalConst(var2, cfgNode))
      {
         value = (Integer.parseInt(cfgNode.in.get(var1).value) - Integer.parseInt(cfgNode.in.get(var2).value)) + "";
         constType = true;
      }
      else if(isLocalConst(var1, cfgNode))
      {
         value = (Integer.parseInt(cfgNode.in.get(var1).value)) + " - " + var2;
      }
      else if(isLocalConst(var2, cfgNode))
      {
         value = var1 + " - " + (Integer.parseInt(cfgNode.in.get(var2).value)) + "";
      }
      else value = var1 + " - " + var2;

      return (R)new ExprReturn(constType, value);
   }

   /**
    * f0 -> Identifier()
    * f1 -> "*"
    * f2 -> Identifier()
    */
   public R visit(TimesExpression n, A argu) 
   {
      CFGNode cfgNode = (CFGNode)argu;

      String var1 = n.f0.f0.tokenImage;
      String var2 = n.f2.f0.tokenImage;

      String value = null;
      boolean constType = false;
      if(isLocalConst(var1, cfgNode) && isLocalConst(var2, cfgNode))
      {
         value = (Integer.parseInt(cfgNode.in.get(var1).value) * Integer.parseInt(cfgNode.in.get(var2).value)) + "";
         constType = true;
      }
      else if(isLocalConst(var1, cfgNode))
      {
         value = (Integer.parseInt(cfgNode.in.get(var1).value)) + " * " + var2;
      }
      else if(isLocalConst(var2, cfgNode))
      {
         value = var1 + " * " + (Integer.parseInt(cfgNode.in.get(var2).value)) + "";
      }
      else value = var1 + " * " + var2;

      return (R)new ExprReturn(constType, value);
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Identifier()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) 
   {
      CFGNode cfgNode = (CFGNode)argu;

      String var1 = n.f0.f0.tokenImage;
      String var2 = n.f2.f0.tokenImage;

      if(isLocalConst(var2, cfgNode)) var2 = cfgNode.in.get(var2).value;

      return (R)new ExprReturn(false, var1 + "[" + var2 + "]");
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) 
   {
      return (R)new ExprReturn(false, n.f0.f0.tokenImage + ".length");
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    */
   public R visit(FieldRead n, A argu) 
   {
      return (R)new ExprReturn(false, n.f0.f0.tokenImage + "." + n.f2.f0.tokenImage);
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ArgList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) 
   {
      CFGNode cfgNode = (CFGNode)argu;
      ExprReturn exprReturn = (ExprReturn)n.f0.accept(this, argu);
      String id = n.f2.f0.tokenImage;

      ArrayList<String> argList = new ArrayList<String>();
      n.f4.accept(this, (A)argList);
      String argListString = "";

      for(int i = 0; i < argList.size(); i++)
      {
         String var = argList.get(i);
         if(isLocalConst(var, cfgNode)) var = cfgNode.in.get(var).value;
         argListString += var + ", ";
      }
      if(argListString.length() > 0) argListString = argListString.substring(0, argListString.length() - 2);

      return (R)new ExprReturn(false, exprReturn.value + "." + id + "(" + argListString + ")");
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( ArgRest() )*
    */
   public R visit(ArgList n, A argu) 
   {
      String id = n.f0.f0.tokenImage;
      ((ArrayList<String>)argu).add(id);
      n.f1.accept(this, argu);
      return null;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(ArgRest n, A argu) 
   {
      String id = n.f1.f0.tokenImage;
      ((ArrayList<String>)argu).add(id);
      return null;
   }

   /**
    * f0 -> IntegerLiteral() 0
    *       | TrueLiteral() 1
    *       | FalseLiteral() 2
    *       | Identifier() 3
    *       | ThisExpression() 4
    *       | ArrayAllocationExpression() 5
    *       | AllocationExpression() 6
    *       | NotExpression() 7
    */
   public R visit(PrimaryExpression n, A argu) 
   {
      CFGNode cfgNode = (CFGNode)argu;

      if(n.f0.which < 3) return (R)new ExprReturn(true, (String)n.f0.accept(this, argu));
      else if(n.f0.which == 3)
      {
         String var = (String)n.f0.accept(this, argu);

         if(isLocalConst(var, cfgNode)) 
            return (R)new ExprReturn(true, cfgNode.in.get(var).value);
         else 
            return (R)new ExprReturn(false, var);
      }

      return n.f0.accept(this, argu);
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) 
   {
      return (R)n.f0.tokenImage;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) 
   {
      return (R)n.f0.tokenImage;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) 
   {
      return (R)n.f0.tokenImage;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) 
   {
      return (R)n.f0.tokenImage;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) 
   {
      return (R)new ExprReturn(false, "this");
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Identifier()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) 
   {
      CFGNode cfgNode = (CFGNode)argu;

      String var = n.f3.f0.tokenImage;

      if(isLocalConst(var, cfgNode)) var = cfgNode.in.get(var).value;

      return (R)new ExprReturn(false, "new int[" + var + "]");
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) 
   {
      return (R)new ExprReturn(false, "new " + n.f1.f0.tokenImage + "()");
   }

   /**
    * f0 -> "!"
    * f1 -> Identifier()
    */
   public R visit(NotExpression n, A argu) 
   {
      CFGNode cfgNode = (CFGNode)argu;

      String var = n.f1.f0.tokenImage;

      String value = null;
      if(isLocalConst(var, cfgNode))
      {
         boolean v = !cfgNode.in.get(var).value.equals("true");
         value = v ? "true" : "false";

         return (R)new ExprReturn(true, value);
      }
      else value = "!" + var;

      return (R)new ExprReturn(false, value);
   }

}
