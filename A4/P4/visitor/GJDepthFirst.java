//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

import javax.print.DocFlavor.INPUT_STREAM;

import attributes.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // Local Class Variables
   //

   HashMap<String, ClassAttr> symbolTable = new HashMap<String, ClassAttr>();
   HashMap<String, String> childParentAddLater = new HashMap<String, String>();

   int visit; // Indicator for the number of visit
   int localStmtNumber; // Local Statement number

   // Current attributes
   String currClass;
   String currMethod;

   boolean DEBUG = true;

   void debugPrint(String s)
   {
      if(DEBUG) System.err.println(s);
   }

   void OUT(String str)
   {
      System.out.println(str);
   }

   String getType(String varName)
   {
      if(symbolTable.get(currClass).methods.get(currMethod).methodVars.containsKey(varName)) 
         return symbolTable.get(currClass).methods.get(currMethod).methodVars.get(varName).dataType;
      else if(symbolTable.get(currClass).methods.get(currMethod).methodParams.containsKey(varName))
         return symbolTable.get(currClass).methods.get(currMethod).methodParams.get(varName).dataType;
      else if(symbolTable.get(currClass).classVars.containsKey(varName))
         return symbolTable.get(currClass).classVars.get(varName).dataType;
      else
      {
         assert(false);
         return null; // Execution should never reach here
      }
   }

   String getTypeSpecific(String varName, String className, String methodName)
   {
      if(symbolTable.get(className).methods.get(methodName).methodVars.containsKey(varName)) 
         return symbolTable.get(className).methods.get(methodName).methodVars.get(varName).dataType;
      else if(symbolTable.get(className).methods.get(methodName).methodParams.containsKey(varName))
         return symbolTable.get(className).methods.get(methodName).methodParams.get(varName).dataType;
      else if(symbolTable.get(className).classVars.containsKey(varName))
         return symbolTable.get(className).classVars.get(varName).dataType;
      else
      {
         assert(false);
         return null; // Execution should never reach here
      }
   }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) 
   {
      currClass = null; currMethod = null;

      visit = 0; // Building the symbol table
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);

      // Process the childParentAddLater
      for(Map.Entry<String, String> entry : childParentAddLater.entrySet()) symbolTable.get(entry.getKey()).children.add(entry.getValue());

      currClass = null; currMethod = null;

      visit = 1; // Building the call graph
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);

      for(ClassAttr classAttr : symbolTable.values()) classAttr.checkRecursion();

      currClass = null; currMethod = null;

      visit = 2; // Inline the methods
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);

      return null;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> ( VarDeclaration() )*
    * f15 -> ( Statement() )*
    * f16 -> "}"
    * f17 -> "}"
    */
   public R visit(MainClass n, A argu) 
   {
      String className = n.f1.f0.tokenImage;
      String methodName = n.f6.tokenImage;

      if(visit == 0)
      {
         ClassAttr classAttr = new ClassAttr(className, null);
         symbolTable.put(className, classAttr);
         currClass = className;

         MethodAttr methodAttr = new MethodAttr(methodName, className, "void");
         classAttr.methods.put(methodName, methodAttr);
         currMethod = methodName;

         n.f14.accept(this, null);
      }
      else if(visit == 1)
      {
         currClass = className;
         currMethod = methodName;

         n.f15.accept(this, null);
      }
      else if(visit == 2)
      {
         currClass = className;
         currMethod = methodName;

         HashMap<String, String> variables = new HashMap<String, String>();
         for(VarAttr varAttr : symbolTable.get(className).methods.get(methodName).methodVars.values()) variables.put(varAttr.varName, varAttr.dataType); // Adding the initial set of local variables

         String statements = (String)n.f15.accept(this, (A)variables);
         
         String varDecls = "";
         for(String varName : variables.keySet()) varDecls += variables.get(varName) + " " + varName + ";\n";

         OUT("class " + className + " {");
         OUT("public static void main(String[] " + n.f11.f0.tokenImage + ") {");
         OUT(varDecls);
         OUT(statements);
         OUT("}");
      }

      return null;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) 
   {
      n.f0.accept(this, argu); // For all visits
      return null;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) 
   {
      String className = n.f1.f0.tokenImage;
      
      if(visit == 0)
      {
         ClassAttr classAttr = new ClassAttr(className, null);
         symbolTable.put(className, classAttr);
         currClass = className;
         currMethod = null;

         n.f3.accept(this, null);
         n.f4.accept(this, null);
      }
      else if(visit == 1)
      {
         currClass = className;
         currMethod = null;

         n.f4.accept(this, null);
      }
      else if(visit == 2)
      {
         currClass = className;
         currMethod = null;

         String classVarDecls = "";
         for(String varName : symbolTable.get(className).classVars.keySet()) classVarDecls += symbolTable.get(className).classVars.get(varName).dataType + " " + varName + ";\n";

         OUT("class " + className + " {");
         OUT(classVarDecls);

         n.f4.accept(this, null);

         OUT("}");
      }

      return null;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) 
   {
      String className = n.f1.f0.tokenImage;
      String parentName = n.f3.f0.tokenImage;

      if(visit == 0)
      {
         ClassAttr classAttr = new ClassAttr(className, parentName);
         symbolTable.put(className, classAttr);
         if(symbolTable.containsKey(parentName)) symbolTable.get(parentName).children.add(className);
         else childParentAddLater.put(parentName, className); // Add later
         currClass = className;
         currMethod = null;

         n.f5.accept(this, null);
         n.f6.accept(this, null);
      }
      else if(visit == 1)
      {
         currClass = className;
         currMethod = null;

         n.f6.accept(this, null);
      }
      else if(visit == 2)
      {
         currClass = className;
         currMethod = null;

         String classVarDecls = "";
         for(String varName : symbolTable.get(className).classVars.keySet()) classVarDecls += symbolTable.get(className).classVars.get(varName).dataType + " " + varName + ";\n";

         OUT("class " + className + " extends " + parentName + " {");
         OUT(classVarDecls);

         n.f6.accept(this, null);

         OUT("}");
      }

      return null;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) 
   {
      assert(visit == 0);

      String varType = (String)n.f0.accept(this, null);
      String varName = n.f1.f0.tokenImage;

      if(currMethod == null) symbolTable.get(currClass).addClassVar(varName, varType);
      else symbolTable.get(currClass).methods.get(currMethod).addMethodVar(varName, varType);

      return null;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Identifier()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) 
   {
      String methodName = n.f2.f0.tokenImage;
      String returnType = (String)n.f1.accept(this, null);

      if(visit == 0)
      {
         MethodAttr methodAttr = new MethodAttr(methodName, currClass, returnType);
         symbolTable.get(currClass).methods.put(methodName, methodAttr);

         currMethod = methodName;

         n.f4.accept(this, null);
         n.f7.accept(this, null);
      }
      else if(visit == 1)
      {
         currMethod = methodName;

         n.f8.accept(this, null);
      }
      else if(visit == 2)
      {
         
      }
      else if(visit == 3) // Some function wants to inline this
      {
         InlineCallerInfo info = (InlineCallerInfo)argu;
         
         for(VarAttr varAttr : symbolTable.get(info.classVarType).methods.get(info.methodName).methodParams.values()) info.addVariable(varAttr);
         for(VarAttr varAttr : symbolTable.get(info.classVarType).methods.get(info.methodName).methodVars.values()) info.addVariable(varAttr);

         for(String varName : info.renamedVariables.keySet()) 
         {
            String type = getTypeSpecific(varName, info.classVarType, info.methodName);
            String renamedVar = info.renamedVariables.get(varName);
            symbolTable.get(currClass).methods.get(currMethod).allDeclaredVariables.put(renamedVar, type);
         }

         String printString = (String)n.f8.accept(this, (A)info);
         String tempString = "";
         if(info.setVar != null)
         {
            String varName = n.f10.f0.tokenImage;
            if(symbolTable.get(info.classVarType).classVars.containsKey(varName)) tempString = (info.setVar = info.classVarName + "." + varName);
         }

         printString += tempString;

         return (R)printString;
      }

      return null;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) 
   {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return null;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) 
   {
      assert(visit == 0);

      String varType = (String)n.f0.accept(this, null);
      String varName = n.f1.f0.tokenImage;

      symbolTable.get(currClass).methods.get(currMethod).addMethodParam(varName, varType);

      return null;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) 
   {
      n.f1.accept(this, argu);
      return null;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) 
   {
      return n.f0.accept(this, argu);
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) 
   {
      return (R)(new String("int[]"));
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) 
   {
      return (R)(new String("boolean"));
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) 
   {
      return (R)(new String("int"));
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | FieldAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | ForStatement()
    *       | PrintStatement()
    *       | MessageSendStatement()
    */
   public R visit(Statement n, A argu) 
   {
      return n.f0.accept(this, argu);
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) 
   {
      if(visit == 2 || visit == 3)
      {
         String printString = "";
         for (Node iterNode : n.f1.nodes) 
         {
            printString += (String)iterNode.accept(this, argu);
         }
         return (R)printString;
      }

      return n.f1.accept(this, argu);
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> RhsExpression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) 
   {
      String varName = n.f0.f0.tokenImage;

      if(visit == 1)
      {
         localStmtNumber++;

         n.f2.accept(this, argu);
      }
      else if(visit == 2)
      {
         localStmtNumber++;
      }
      else if(visit == 3)
      {
         InlineCallerInfo info = (InlineCallerInfo)argu;
         String renamedVar = info.renamedVariables.get(varName);
         String exprString = (String)n.f2.accept(this, argu);
         return (R)(renamedVar + " = " + exprString);
      }

      return null;
   }

   /**
    * f0 -> DotExpression()
    *       | Expression()
    */
   public R visit(RhsExpression n, A argu) 
   {
      if(visit == 1)
      {
         n.f0.accept(this, argu);
      }
      return null;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Identifier()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Identifier()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) 
   {
      String varName = n.f0.f0.tokenImage;
      String arrayIndex = n.f2.f0.tokenImage;
      String arrayValue = n.f5.f0.tokenImage;

      if(visit == 1)
      {
         localStmtNumber++;
      }

      return null;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> Identifier()
    * f5 -> ";"
    */
   public R visit(FieldAssignmentStatement n, A argu) 
   {
      String varName = n.f0.f0.tokenImage;
      String fieldName = n.f2.f0.tokenImage;
      String fieldValue = n.f4.f0.tokenImage;

      if(visit == 1)
      {
         localStmtNumber++;
      }

      return null;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfStatement n, A argu) 
   {
      String condValue = n.f2.f0.tokenImage;

      if(visit == 1)
      {
         localStmtNumber++;

         n.f4.accept(this, argu);
         n.f6.accept(this, argu);
      }

      return null;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) 
   {
      String condValue = n.f2.f0.tokenImage;

      if(visit == 1)
      {
         localStmtNumber++;
         n.f4.accept(this, argu);
      }

      return null;
   }

   /**
    * f0 -> "for"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> Expression()
    * f5 -> ";"
    * f6 -> Expression()
    * f7 -> ";"
    * f8 -> Identifier()
    * f9 -> "="
    * f10 -> Expression()
    * f11 -> ")"
    * f12 -> Statement()
    */
   public R visit(ForStatement n, A argu) 
   {
      String initValue = n.f2.f0.tokenImage;
      String updateValue = n.f8.f0.tokenImage;

      if(visit == 1)
      {
         localStmtNumber++;
         n.f12.accept(this, argu);
      }

      return null;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) 
   {
      String printValue = n.f2.f0.tokenImage;

      if(visit == 1)
      {
         localStmtNumber++;
      }

      return null;
   }

   /**
    * f0 -> ( InlineAnn() )?
    * f1 -> ( VoidMessageSendStmt() | RetMessageSendStmt() )
    */
   public R visit(MessageSendStatement n, A argu) 
   {
      if(visit == 1)
      {
         localStmtNumber++;

         boolean inlineable = n.f0.present();
         MSReturn msReturn = (MSReturn)n.f1.accept(this, argu);

         symbolTable.get(currClass).methods.get(currMethod).constructCallGraph(msReturn.className, msReturn.methodName, localStmtNumber, symbolTable, inlineable);
      }

      return null;
   }

   /**
    * f0 -> MessageSend()
    * f1 -> ";"
    */
   public R visit(VoidMessageSendStmt n, A argu) 
   {
      if(visit == 1)
      {
         return n.f0.accept(this, argu);
      }

      return null;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> MessageSend()
    * f3 -> ";"
    */
   public R visit(RetMessageSendStmt n, A argu) 
   {
      if(visit == 1)
      {
         return n.f2.accept(this, argu);
      }

      return null;
   }

   /**
    * f0 -> <SCOMMENT1>
    * f1 -> <INLINE>
    * f2 -> <SCOMMENT2>
    */
   public R visit(InlineAnn n, A argu) 
   {
      return null;
   }

   /**
    * f0 -> AndExpression()
    *       | CompareExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "&"
    * f2 -> Identifier()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "<"
    * f2 -> Identifier()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "+"
    * f2 -> Identifier()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "-"
    * f2 -> Identifier()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "*"
    * f2 -> Identifier()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Identifier()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ArgList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) 
   {
      if(visit == 1)
      {
         String className = (String)n.f0.accept(this, argu);
         String methodName = n.f2.f0.tokenImage;

         return (R)(new MSReturn(className, methodName));
      }
      return null;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( ArgRest() )*
    */
   public R visit(ArgList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(ArgRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral() 0
    *       | TrueLiteral() 1
    *       | FalseLiteral() 2
    *       | Identifier() 3
    *       | ThisExpression () 4
    *       | ArrayAllocationExpression() 5
    *       | AllocationExpression() 6
    *       | NotExpression() 7
    */
   public R visit(PrimaryExpression n, A argu) 
   {
      if(visit == 1)
      {
         if(n.f0.which == 6) return n.f0.accept(this, argu);
         else if(n.f0.which == 4) return (R)(new String(currClass));
         else if(n.f0.which == 3)
         {
            String varType = getType((String)n.f0.accept(this, argu));
            return (R)(new String(varType));
         }
      }
      else
      {
      
      }

      return null;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) 
   {
      return (R)(new String(n.f0.tokenImage));
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) 
   {
      return (R)(new String("true"));
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) 
   {
      return (R)(new String("false"));
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) 
   {
      return (R)(new String(n.f0.tokenImage));
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) 
   {
      return (R)(new String("this"));
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Identifier()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) 
   {
      String arraySize = n.f3.f0.tokenImage;

      if(visit == 2 || visit == 3) return (R)(new String("new int[" + arraySize + "]"));

      return null;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) 
   {
      String className = n.f1.f0.tokenImage;

      if(visit == 1) return (R)(new String(className));
      else if(visit == 2 || visit == 3) return (R)(new String("new " + className + "()"));

      return null;
   }

   /**
    * f0 -> "!"
    * f1 -> Identifier()
    */
   public R visit(NotExpression n, A argu) 
   {
      String varName = n.f1.f0.tokenImage;

      if(visit == 2 || visit == 3) return (R)(new String("!" + varName));

      return null;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    */
   public R visit(DotExpression n, A argu) 
   {
      String varName = n.f0.f0.tokenImage;
      String fieldName = n.f2.f0.tokenImage;

      if(visit == 2 || visit == 3) return (R)(new String(varName + "." + fieldName));

      return null;
   }
}
