//
// Generated by JTB 1.3.2
//

package visitor;

import syntaxtree.*;
import java.util.*;
import attributes.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // Local Class Variables
   //

   HashMap<String, ClassAttr> symbolTable = new HashMap<String, ClassAttr>(); // ClassName -> ClassAttr
   HashMap<String, String> childParentAddLater = new HashMap<String, String>(); // ParentName -> ChildName

   int visit; // Indicator for the number of visit
   int localStmtNumber; // Local Statement number

   // Current attributes
   String currClass;
   String currMethod;

   boolean DEBUG = true;

   String setVarGlobal = null;

   void debugPrint(String s)
   {
      if(DEBUG) System.err.println(s);
   }

   void OUT(String str)
   {
      System.out.println(str);
   }

   String findType(String varName, String className, String methodName)
   {
      if(symbolTable.get(className).methods.get(methodName).methodVars.containsKey(varName)) 
         return symbolTable.get(className).methods.get(methodName).methodVars.get(varName).dataType;
      else if(symbolTable.get(className).methods.get(methodName).methodParams.containsKey(varName))
         return symbolTable.get(className).methods.get(methodName).methodParams.get(varName).dataType;
      else if(symbolTable.get(className).classVars.containsKey(varName))
         return symbolTable.get(className).classVars.get(varName).dataType;
      else
      {
         assert(false);
         return null; // Execution should never reach here
      }
   }

   String getName(InlineCallerInfo info, String varName)
   {
      if(info.renamedLocalVars.containsKey(varName)) return info.renamedLocalVars.get(varName);
      else if(info.renamedParams.containsKey(varName)) return info.renamedParams.get(varName);
      else return varName; // It is a class variable
   }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) 
   {
      currClass = null; currMethod = null;

      visit = 0; // Building the symbol table
      n.f0.accept(this, null);
      n.f1.accept(this, null);

      // Process the childParentAddLater
      for(Map.Entry<String, String> entry : childParentAddLater.entrySet()) 
         symbolTable.get(entry.getKey()).children.add(entry.getValue());

      currClass = null; currMethod = null;

      visit = 1; // Building the call graph
      n.f0.accept(this, null);
      n.f1.accept(this, null);

      for(ClassAttr classAttr : symbolTable.values()) classAttr.checkRecursion();

      // for(ClassAttr classAttr: symbolTable.values()) classAttr.printInfo();

      currClass = null; currMethod = null;

      visit = 2; // Inline the methods
      n.f0.accept(this, null);
      n.f1.accept(this, null);

      return null;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> ( VarDeclaration() )*
    * f15 -> ( Statement() )*
    * f16 -> "}"
    * f17 -> "}"
    */
   public R visit(MainClass n, A argu) 
   {
      String className = n.f1.f0.tokenImage;
      String methodName = n.f6.tokenImage;
      currClass = className;
      currMethod = methodName;

      if(visit == 0) // Building the symbol table
      {
         ClassAttr classAttr = new ClassAttr(className, null);
         symbolTable.put(className, classAttr);

         MethodAttr methodAttr = new MethodAttr(methodName, className, "void");
         classAttr.methods.put(methodName, methodAttr);

         n.f14.accept(this, null);
      }
      else if(visit == 1) // Building the call graph
      {
         localStmtNumber = 0;
         n.f15.accept(this, null);
      }
      else if(visit == 2)
      {
         // Adding local variables to the allDeclaredVariables
         for(VarAttr varAttr: symbolTable.get(className).methods.get(methodName).methodVars.values()) 
            symbolTable.get(className).methods.get(methodName).allDeclaredVariables.put(varAttr.varName, varAttr.dataType);
         
         localStmtNumber = 0;
         // Processing the statemnts
         String stmtPrintString = "";
         for(Node node: n.f15.nodes) stmtPrintString += (String)node.accept(this, null);
         
         // Printing the variable declaration
         String varDecls = "";
         for(String varName: symbolTable.get(currClass).methods.get(currMethod).allDeclaredVariables.keySet())
         {
            String varType = symbolTable.get(currClass).methods.get(currMethod).allDeclaredVariables.get(varName);
            varDecls += varType + " " + varName + ";\n";
         }

         OUT("class " + className + " {");
         OUT("public static void main(String[] " + n.f11.f0.tokenImage + ") {");
         OUT(varDecls + stmtPrintString + "}\n}");
      }

      return null;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) 
   {
      n.f0.accept(this, argu); // For all visits
      return null;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) 
   {
      String className = n.f1.f0.tokenImage;
      currClass = className;
      currMethod = null;
      
      if(visit == 0)
      {
         ClassAttr classAttr = new ClassAttr(className, null);
         symbolTable.put(className, classAttr);

         n.f3.accept(this, null); // To add the class variables
         n.f4.accept(this, null); // To add all the methods and their basic info
      }
      else if(visit == 1)
      {
         n.f4.accept(this, null);
      }
      else if(visit == 2)
      {
         String classVarDecls = "";
         for(String varName : symbolTable.get(className).classVars.keySet()) 
         {
            String varType = symbolTable.get(className).classVars.get(varName).dataType;
            classVarDecls += varType + " " + varName + ";\n";
         }

         OUT("class " + className + " {");
         OUT(classVarDecls);

         n.f4.accept(this, null); // visit == 2, method prints all the info itself: doesn't return a string

         OUT("}");
      }

      return null;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) 
   {
      String className = n.f1.f0.tokenImage;
      String parentName = n.f3.f0.tokenImage;
      currClass = className;
      currMethod = null;

      if(visit == 0)
      {
         ClassAttr classAttr = new ClassAttr(className, parentName);
         symbolTable.put(className, classAttr);
         if(symbolTable.containsKey(parentName)) symbolTable.get(parentName).children.add(className);
         else childParentAddLater.put(parentName, className); // Add later

         n.f5.accept(this, null);
         n.f6.accept(this, null);
      }
      else if(visit == 1)
      {
         n.f6.accept(this, null);
      }
      else if(visit == 2)
      {
         String classVarDecls = "";
         for(String varName : symbolTable.get(className).classVars.keySet()) 
         {
            String varType = symbolTable.get(className).classVars.get(varName).dataType;
            classVarDecls += varType + " " + varName + ";\n";
         }

         OUT("class " + className + " extends " + parentName + " {");
         OUT(classVarDecls);

         n.f6.accept(this, null); // visit == 2, method prints all the info itself: doesn't return a string

         OUT("}");
      }

      return null;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) 
   {
      assert(visit == 0);

      String varType = (String)n.f0.accept(this, null);
      String varName = n.f1.f0.tokenImage;

      if(currMethod == null) symbolTable.get(currClass).addClassVar(varName, varType);
      else symbolTable.get(currClass).methods.get(currMethod).addMethodVar(varName, varType);

      return null;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Identifier()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) 
   {
      String methodName = n.f2.f0.tokenImage;
      String returnType = (String)n.f1.accept(this, null);
      
      if(visit == 0)
      {
         currMethod = methodName;
         MethodAttr methodAttr = new MethodAttr(methodName, currClass, returnType);
         methodAttr.methodNode = n;
         symbolTable.get(currClass).methods.put(methodName, methodAttr);

         n.f4.accept(this, null);
         n.f7.accept(this, null);
      }
      else if(visit == 1)
      {
         currMethod = methodName;
         localStmtNumber = 0;
         n.f8.accept(this, null);
      }
      else if(visit == 2)
      {
         currMethod = methodName;
         for(VarAttr varAttr: symbolTable.get(currClass).methods.get(currMethod).methodVars.values()) 
            symbolTable.get(currClass).methods.get(currMethod).allDeclaredVariables.put(varAttr.varName, varAttr.dataType);

         String paramString = "";
         for(String varName : symbolTable.get(currClass).methods.get(currMethod).methodParams.keySet())
         {
            String varType = symbolTable.get(currClass).methods.get(currMethod).methodParams.get(varName).dataType;
            paramString += varType + " " + varName + ", ";
         }
         if(paramString.length() > 0) paramString = paramString.substring(0, paramString.length() - 2);

         localStmtNumber = 0;
         String stmtString = "";
         for(Node node: n.f8.nodes) stmtString += (String)node.accept(this, null);

         String varDecls = "";
         for(String varName: symbolTable.get(currClass).methods.get(currMethod).allDeclaredVariables.keySet())
         {
            String varType = symbolTable.get(currClass).methods.get(currMethod).allDeclaredVariables.get(varName);
            varDecls += varType + " " + varName + ";\n";
         }

         String returnVar = n.f10.f0.tokenImage;

         OUT("public " + returnType + " " + methodName + "(" + paramString + ") {");
         OUT(varDecls + stmtString);
         OUT("return " + returnVar + ";\n}");
      }
      else if(visit == 3) // Some function wants to inline this
      {
         InlineCallerInfo info = (InlineCallerInfo)argu;
         
         MethodAttr calleeMethodAttr = symbolTable.get(info.classVarType).methods.get(info.methodName);
         MethodAttr globalCallerMethodAttr = symbolTable.get(currClass).methods.get(currMethod);
         
         for(VarAttr varAttr : calleeMethodAttr.methodParams.values()) info.addAndRenameParam(varAttr);
         for(VarAttr varAttr : calleeMethodAttr.methodVars.values()) info.addAndRenameLocalvar(varAttr);
         
         // Adding the variables to the all declared variables of the global call
         for(String varName : info.renamedLocalVars.keySet()) 
         {
            String type = findType(varName, info.classVarType, info.methodName);
            String renamedVar = info.renamedLocalVars.get(varName);
            
            globalCallerMethodAttr.allDeclaredVariables.put(renamedVar, type);
         }
         
         // Adding the parameters to the all declared variables of the global call
         for (String varName : info.renamedParams.keySet()) 
         {
            String type = findType(varName, info.classVarType, info.methodName);
            String renamedVar = info.renamedParams.get(varName);
            
            globalCallerMethodAttr.allDeclaredVariables.put(renamedVar, type);
         }
         
         String printString = ""; // For statements and return statement
         String stmtString  = "";
         for(Node node: n.f8.nodes) stmtString += (String)node.accept(this, (A)info);
         printString += stmtString;
         
         info._retString = getName(info, n.f10.f0.tokenImage);

         return (R)printString;
      }

      return null;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) 
   {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return null;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) 
   {
      assert(visit == 0);

      String varType = (String)n.f0.accept(this, null);
      String varName = n.f1.f0.tokenImage;

      symbolTable.get(currClass).methods.get(currMethod).addMethodParam(varName, varType);

      return null;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) 
   {
      n.f1.accept(this, argu);
      return null;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) 
   {
      return n.f0.accept(this, argu);
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) 
   {
      return (R)(new String("int[]"));
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) 
   {
      return (R)(new String("boolean"));
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) 
   {
      return (R)(new String("int"));
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | FieldAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | ForStatement()
    *       | PrintStatement()
    *       | MessageSendStatement()
    */
   public R visit(Statement n, A argu) 
   {
      return n.f0.accept(this, argu);
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) 
   {
      if(visit == 2 || visit == 3)
      {
         String printString = "";
         for (Node iterNode : n.f1.nodes) printString += (String)iterNode.accept(this, argu);
         return (R)printString;
      }

      return n.f1.accept(this, argu);
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> RhsExpression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) 
   {
      String varName = n.f0.f0.tokenImage;

      if(visit == 1)
      {
         localStmtNumber++;

         n.f2.accept(this, argu);
      }
      else if(visit == 2)
      {
         localStmtNumber++;
         String exprString = (String)n.f2.accept(this, argu);

         return (R)(varName + " = " + exprString + ";\n");
      }
      else if(visit == 3)
      {
         InlineCallerInfo info = (InlineCallerInfo)argu;
         info.localStmtNumber++;

         String renamedVar = getName(info, varName);
         String exprString = (String)n.f2.accept(this, argu);

         return (R)(renamedVar + " = " + exprString + ";\n");
      }

      return null;
   }

   /**
    * f0 -> DotExpression()
    *       | Expression()
    */
   public R visit(RhsExpression n, A argu) 
   {
      return n.f0.accept(this, argu);
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Identifier()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Identifier()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) 
   {
      String varName = n.f0.f0.tokenImage;
      String arrayIndex = n.f2.f0.tokenImage;
      String arrayValue = n.f5.f0.tokenImage;

      if(visit == 1)
      {
         localStmtNumber++;
      }
      else if(visit == 2)
      {
         localStmtNumber++;

         return (R)(varName + "[ " + arrayIndex + " ] = " + arrayValue + ";\n");
      }
      else if(visit == 3)
      {
         InlineCallerInfo info = (InlineCallerInfo)(argu);
         info.localStmtNumber++;

         return (R)(getName(info, varName) + " [ " + getName(info, arrayIndex) + " ] = " + getName(info, arrayValue) + ";\n");
      }

      return null;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> Identifier()
    * f5 -> ";"
    */
   public R visit(FieldAssignmentStatement n, A argu) 
   {
      String varName = n.f0.f0.tokenImage;
      String fieldName = n.f2.f0.tokenImage;
      String fieldValue = n.f4.f0.tokenImage;

      if(visit == 1)
      {
         localStmtNumber++;
      }
      else if(visit == 2)
      {
         localStmtNumber++;

         return (R)(varName + "." + fieldName + " = " + fieldValue + ";\n");
      }
      else if(visit == 3)
      {
         InlineCallerInfo info = (InlineCallerInfo)argu;
         info.localStmtNumber++;

         return (R)(getName(info, varName) + "." + fieldName + " = " + getName(info, fieldValue) + ";\n");
      }

      return null;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfStatement n, A argu) 
   {
      String condValue = n.f2.f0.tokenImage;

      if(visit == 1)
      {
         localStmtNumber++;

         n.f4.accept(this, argu);
         n.f6.accept(this, argu);
      }
      else if(visit == 2)
      {
         localStmtNumber++;

         String ifStmt = (String)n.f4.accept(this, argu);
         String elseStmt = (String)n.f6.accept(this, argu);

         return (R)("if(" + condValue + ") {\n" + ifStmt + "} else {\n" + elseStmt + "}");
      }
      else if(visit == 3)
      {
         InlineCallerInfo info = (InlineCallerInfo)argu;
         info.localStmtNumber++;

         String ifStmt = (String)n.f4.accept(this, argu);
         String elseStmt = (String)n.f6.accept(this, argu);

         return (R)("if(" + getName(info, condValue) + ") {\n" + ifStmt + "} else {\n" + elseStmt + "}");
      }

      return null;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) 
   {
      String condValue = n.f2.f0.tokenImage;

      if(visit == 1)
      {
         localStmtNumber++;
         n.f4.accept(this, argu);
      }
      else if(visit == 2)
      {
         localStmtNumber++;

         String whileStmt = (String)n.f4.accept(this, argu);

         return (R)("while(" + condValue + ") {\n" + whileStmt + "}");
      }
      else if(visit == 3)
      {
         InlineCallerInfo info = (InlineCallerInfo)argu;
         info.localStmtNumber++;

         String whileStmt = (String)n.f4.accept(this, argu);

         return (R)("while(" + getName(info, condValue) + ") {\n" + whileStmt + "}");
      }

      return null;
   }

   /**
    * f0 -> "for"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> Expression()
    * f5 -> ";"
    * f6 -> Expression()
    * f7 -> ";"
    * f8 -> Identifier()
    * f9 -> "="
    * f10 -> Expression()
    * f11 -> ")"
    * f12 -> Statement()
    */
   public R visit(ForStatement n, A argu) 
   {
      String initValue = n.f2.f0.tokenImage;
      String updateValue = n.f8.f0.tokenImage;

      if(visit == 1)
      {
         localStmtNumber++;
         n.f12.accept(this, argu);
      }
      else if(visit == 2)
      {
         localStmtNumber++;

         String initExpr = (String)n.f4.accept(this, argu);
         String condExpr = (String)n.f6.accept(this, argu);
         String updateExpr = (String)n.f10.accept(this, argu);
         String forStmt = (String)n.f12.accept(this, argu);

         String printString = "for(" + initValue + " = " + initExpr + "; " + condExpr + "; " + updateValue + " = " + updateExpr + ") {\n" + forStmt + "}";
         return (R)printString;
      }
      else if(visit == 3)
      {
         InlineCallerInfo info = (InlineCallerInfo)argu;
         info.localStmtNumber++;

         String initExpr = (String)n.f4.accept(this, argu);
         String condExpr = (String)n.f6.accept(this, argu);
         String updateExpr = (String)n.f10.accept(this, argu);
         String forStmt = (String)n.f12.accept(this, argu);

         String printString = "for(" + getName(info, initValue) + " = " + initExpr + "; " + condExpr + "; " + getName(info, updateValue) + " = " + updateExpr + ") {\n" + forStmt + "}";
         return (R)printString;
      }

      return null;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) 
   {
      String printValue = n.f2.f0.tokenImage;

      if(visit == 1)
      {
         localStmtNumber++;
      }
      else if(visit == 2)
      {
         localStmtNumber++;

         return (R)("System.out.println(" + printValue + ")" + ";\n");
      }
      else if(visit == 3)
      {
         InlineCallerInfo info = (InlineCallerInfo)argu;
         info.localStmtNumber++;

         return (R)("System.out.println(" + getName(info, printValue) + ")" + ";\n");
      }

      return null;
   }

   /**
    * f0 -> ( InlineAnn() )?
    * f1 -> ( VoidMessageSendStmt() | RetMessageSendStmt() )
    */
   public R visit(MessageSendStatement n, A argu) 
   {
      if(visit == 1)
      {
         localStmtNumber++;

         boolean inlineable = n.f0.present();
         MSReturn msReturn = (MSReturn)n.f1.accept(this, argu);

         symbolTable.get(currClass).methods.get(currMethod).constructCallGraph(msReturn.className, msReturn.methodName, localStmtNumber, symbolTable, inlineable);
      }
      else if(visit == 2)
      {
         localStmtNumber++;

         return n.f1.accept(this, argu);
      }
      else if(visit == 3)
      {
         InlineCallerInfo info = (InlineCallerInfo)argu;
         info.localStmtNumber++;

         return n.f1.accept(this, argu);
      }

      return null;
   }

   /**
    * f0 -> MessageSend()
    * f1 -> ";"
    */
   public R visit(VoidMessageSendStmt n, A argu) 
   {
      if(visit == 1) return n.f0.accept(this, argu);
      else if(visit == 2 || visit == 3)
      {
         String setVarOld = setVarGlobal;
         setVarGlobal = null;
         R _ret = n.f0.accept(this, argu);
         setVarGlobal = setVarOld;
         return _ret;
      }
      return null;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> MessageSend()
    * f3 -> ";"
    */
   public R visit(RetMessageSendStmt n, A argu) 
   {
      if(visit == 1) return n.f2.accept(this, argu);
      else if(visit == 2 || visit == 3)
      {
         String setVarOld = setVarGlobal;
         setVarGlobal = n.f0.f0.tokenImage;
         if(visit == 3) setVarGlobal = getName((InlineCallerInfo)argu, setVarGlobal);
         R _ret = n.f2.accept(this, argu);
         setVarGlobal = setVarOld;
         return _ret;
      }

      return null;
   }

   /**
    * f0 -> <SCOMMENT1>
    * f1 -> <INLINE>
    * f2 -> <SCOMMENT2>
    */
   public R visit(InlineAnn n, A argu) 
   {
      return null;
   }

   /**
    * f0 -> AndExpression() 0
    *       | CompareExpression() 1
    *       | PlusExpression() 2
    *       | MinusExpression() 3
    *       | TimesExpression() 4
    *       | ArrayLookup() 5
    *       | ArrayLength() 6
    *       | PrimaryExpression() 7
    */
   public R visit(Expression n, A argu) 
   {
      if(visit == 2 || visit == 3)
      {
         if(n.f0.which == 7)
         {
            PrimaryReturn exprReturn = (PrimaryReturn)n.f0.accept(this, argu);

            return (R)exprReturn.exprString;
         }

         return n.f0.accept(this, argu);
      }

      return n.f0.accept(this, argu);
   }

   /**
    * f0 -> Identifier()
    * f1 -> "&"
    * f2 -> Identifier()
    */
   public R visit(AndExpression n, A argu) 
   {
      String var1 = n.f0.f0.tokenImage;
      String var2 = n.f2.f0.tokenImage;

      if(visit == 2) return (R)(var1 + " && " + var2);
      else if(visit == 3)
      {
         InlineCallerInfo info = (InlineCallerInfo)argu;
         String renamedVar1 = getName(info, var1);
         String renamedVar2 = getName(info, var2);

         return (R)(renamedVar1 + " && " + renamedVar2);
      }

      return null;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "<"
    * f2 -> Identifier()
    */
   public R visit(CompareExpression n, A argu) 
   {
      String var1 = n.f0.f0.tokenImage;
      String var2 = n.f2.f0.tokenImage;

      if(visit == 2) return (R)(var1 + " < " + var2);
      else if(visit == 3)
      {
         InlineCallerInfo info = (InlineCallerInfo)argu;
         String renamedVar1 = getName(info, var1);
         String renamedVar2 = getName(info, var2);

         return (R)(renamedVar1 + " < " + renamedVar2);
      }

      return null;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "+"
    * f2 -> Identifier()
    */
   public R visit(PlusExpression n, A argu) 
   {
      String var1 = n.f0.f0.tokenImage;
      String var2 = n.f2.f0.tokenImage;

      if(visit == 2) return (R)(var1 + " + " + var2);
      else if(visit == 3)
      {
         InlineCallerInfo info = (InlineCallerInfo)argu;
         String renamedVar1 = getName(info, var1);
         String renamedVar2 = getName(info, var2);

         return (R)(renamedVar1 + " + " + renamedVar2);
      }

      return null;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "-"
    * f2 -> Identifier()
    */
   public R visit(MinusExpression n, A argu) 
   {
      String var1 = n.f0.f0.tokenImage;
      String var2 = n.f2.f0.tokenImage;

      if(visit == 2) return (R)(var1 + " - " + var2);
      else if(visit == 3)
      {
         InlineCallerInfo info = (InlineCallerInfo)argu;
         String renamedVar1 = getName(info, var1);
         String renamedVar2 = getName(info, var2);

         return (R)(renamedVar1 + " - " + renamedVar2);
      }

      return null;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "*"
    * f2 -> Identifier()
    */
   public R visit(TimesExpression n, A argu) 
   {
      String var1 = n.f0.f0.tokenImage;
      String var2 = n.f2.f0.tokenImage;

      if(visit == 2) return (R)(var1 + " * " + var2);
      else if(visit == 3)
      {
         InlineCallerInfo info = (InlineCallerInfo)argu;
         String renamedVar1 = getName(info, var1);
         String renamedVar2 = getName(info, var2);

         return (R)(renamedVar1 + " * " + renamedVar2);
      }

      return null;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Identifier()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) 
   {
      String arrayName = n.f0.f0.tokenImage;
      String arrayIndex = n.f2.f0.tokenImage;

      if(visit == 2) return (R)(arrayName + "[ " + arrayIndex + " ]");
      else if(visit == 3)
      {
         InlineCallerInfo info = (InlineCallerInfo)argu;
         String renamedArrayName = getName(info, arrayName);
         String renamedArrayIndex = getName(info, arrayIndex);

         return (R)(renamedArrayName + "[ " + renamedArrayIndex + " ]");
      }

      return null;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) 
   {
      String arrayName = n.f0.f0.tokenImage;

      if(visit == 2) return (R)(arrayName + ".length");
      else if(visit == 3)
      {
         InlineCallerInfo info = (InlineCallerInfo)argu;
         String renamedArrayName = getName(info, arrayName);

         return (R)(renamedArrayName + ".length");
      }

      return null;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ArgList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) 
   {
      if(visit == 1)
      {
         String className = (String)n.f0.accept(this, argu);
         String methodName = n.f2.f0.tokenImage;

         return (R)(new MSReturn(className, methodName));
      }
      else if(visit == 2)
      {
         CallNode callNode = symbolTable.get(currClass).methods.get(currMethod).callGraph.get(localStmtNumber);

         PrimaryReturn exprReturn = (PrimaryReturn)n.f0.accept(this, argu);
         String methodName = n.f2.f0.tokenImage;
         ArrayList<String> argList = (ArrayList<String>)n.f4.accept(this, argu);
         if(argList == null) argList = new ArrayList<String>();
         
         if(callNode.shouldInline)
         {
            MethodAttr methodToInline = callNode.callSigns.iterator().next();

            // Creating a new temporary variable for the primary expression
            String tempClassVarName = "__tempcaller__" + String.valueOf(1) + "_" + String.valueOf(localStmtNumber);
            
            // Creating the InlineCallerInfo object and setting arguments and the setVar
            InlineCallerInfo info = new InlineCallerInfo(tempClassVarName, methodToInline.className, localStmtNumber, methodName, 1);
            info.arguments = argList;
            
            // Adding the new variable to the set of declared variables
            symbolTable.get(currClass).methods.get(currMethod).allDeclaredVariables.put(tempClassVarName, exprReturn.dataType);

            // Making a visit to the inlined method
            visit = 3;
            String methodString = (String)methodToInline.methodNode.accept(this, (A)info);
            visit = 2;

            // Getting the definitions inside the inlined function
            String varDefs = tempClassVarName + " = " + exprReturn.exprString + ";\n";
            int i = 0;
            for(String param : symbolTable.get(methodToInline.className).methods.get(methodName).methodParams.keySet())
            {
               varDefs += info.renamedParams.get(param) + " = " + argList.get(i) + ";\n";
               i++;
            }
            String returnString = "";
            if(setVarGlobal != null) returnString = setVarGlobal + " = " + info._retString + ";\n";

            String printString = "{\n" + varDefs + methodString + returnString + "}\n";
            return (R)printString;
         }
         else
         {
            String argString = "";
            for(String arg : argList) argString += arg + ", ";
            if(argString.length() > 0) argString = argString.substring(0, argString.length() - 2);

            String returnString = "";
            if(setVarGlobal != null) returnString = setVarGlobal + " = ";
            returnString += exprReturn.exprString + "." + methodName + "(" + argString + ");\n";
            return (R)returnString;
         }
      }
      else if(visit == 3)
      {
         InlineCallerInfo info = (InlineCallerInfo)argu;
         CallNode callNode = symbolTable.get(info.classVarType).methods.get(info.methodName).callGraph.get(info.localStmtNumber);
         PrimaryReturn exprReturn = (PrimaryReturn)n.f0.accept(this, argu);
         String methodName = n.f2.f0.tokenImage;
         ArrayList<String> argList = (ArrayList<String>)n.f4.accept(this, argu);

         if(argList == null) argList = new ArrayList<String>();
         
         if(callNode.shouldInline)
         {
            // Creating a new temporary variable for the primary expression
            String tempClassVarName = "__tempcaller__" + String.valueOf(info.depth + 1) + "_" + String.valueOf(info.localStmtNumber);
            
            // Creating the InlineCallerInfo object and setting arguments and the setVar
            InlineCallerInfo newInfo = new InlineCallerInfo(tempClassVarName, exprReturn.dataType, info.localStmtNumber, methodName, info.depth + 1);
            newInfo.arguments = argList;
            
            // Adding the new variable to the set of declared variables
            symbolTable.get(currClass).methods.get(currMethod).allDeclaredVariables.put(tempClassVarName, exprReturn.dataType);

            // Making a visit to the inlined method          
            Node methodToInline = callNode.callSigns.iterator().next().methodNode;
            String methodString = (String)methodToInline.accept(this, (A)newInfo);

            // Getting the definitions inside the inlined function
            String classVar = exprReturn.exprString; // already renamed

            String varDefs = tempClassVarName + " = " + classVar + ";\n";
            int i = 0;
            for(String param : symbolTable.get(exprReturn.dataType).methods.get(methodName).methodParams.keySet())
            {
               varDefs += newInfo.renamedParams.get(param) + " = " + getName(info, argList.get(i)) + ";\n";
               i++;
            }
            String returnString = "";
            if(setVarGlobal != null) returnString = setVarGlobal + " = " + newInfo._retString + ";\n"; // setVarGlobal is already renamed

            String printString = "{\n" + varDefs + methodString + returnString + "}\n";
            return (R)printString;
         }
         else
         {
            String argString = "";
            for(String arg : argList) argString += arg + ", ";
            if(argString.length() > 0) argString = argString.substring(0, argString.length() - 2);

            String returnString = "";
            if(setVarGlobal != null) returnString = setVarGlobal + " = ";

            String callVar = exprReturn.exprString; // already renamed

            returnString += callVar + "." + methodName + "(" + argString + ");\n";
            return (R)returnString;
         }
      }
      return null;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( ArgRest() )*
    */
   public R visit(ArgList n, A argu) 
   {
      if(visit == 2 || visit == 3)
      {
         ArrayList<String> argList = new ArrayList<String>();
         argList.add(n.f0.f0.tokenImage);

         for(Node iterNode : n.f1.nodes) argList.add((String)iterNode.accept(this, argu));

         return (R)argList;
      }
      return null;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(ArgRest n, A argu) 
   {
      return (R)n.f1.f0.tokenImage;
   }

   /**
    * f0 -> IntegerLiteral() 0
    *       | TrueLiteral() 1
    *       | FalseLiteral() 2
    *       | Identifier() 3
    *       | ThisExpression () 4
    *       | ArrayAllocationExpression() 5
    *       | AllocationExpression() 6
    *       | NotExpression() 7
    */
   public R visit(PrimaryExpression n, A argu) 
   {
      if(visit == 1)
      {
         if(n.f0.which == 6) return n.f0.accept(this, argu);
         else if(n.f0.which == 4) return (R)(new String(currClass));
         else if(n.f0.which == 3)
         {
            String varType = findType((String)n.f0.accept(this, null), currClass, currMethod);
            return (R)(new String(varType));
         }
      }
      else if(visit == 2 || visit == 3)
      {
         String exprString = null;
         String dataType = null;

         if(n.f0.which == 1 || n.f0.which == 2 || n.f0.which == 7)
         {
            exprString = (String)n.f0.accept(this, argu);
            dataType = "boolean";
         }
         else if(n.f0.which == 0)
         {
            exprString = (String)n.f0.accept(this, argu);
            dataType = "int";
         }
         else if(n.f0.which == 3)
         {
            String varName = (String)n.f0.accept(this, argu);
            
            if(visit == 2) 
            {
               dataType = findType(varName, currClass, currMethod);
               exprString = varName;
            }
            else if(visit == 3)
            {
               InlineCallerInfo info = (InlineCallerInfo)argu;
               dataType = findType(varName, info.classVarType, info.methodName);
               exprString = getName(info, varName);
            }
         }
         else if(n.f0.which == 4)
         {
            if(visit == 2)
            {
               dataType = currClass;
               exprString = "this";
            }
            else if(visit == 3)
            {
               InlineCallerInfo info = (InlineCallerInfo)argu;
               dataType = info.classVarType;
               exprString = info.classVarName;
            }
         }
         else if(n.f0.which == 5)
         {
            exprString = (String)n.f0.accept(this, argu);
            dataType = "int[]";
         }
         else if(n.f0.which == 6)
         {
            exprString = (String)n.f0.accept(this, argu);
            // exprString = "new " + dataType + "()"; get type from this
            // get the datatype from the exprString
            dataType = exprString.substring(4, exprString.length() - 2);
         }

         return (R)(new PrimaryReturn(exprString, dataType));
      }

      return null;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) 
   {
      return (R)(new String(n.f0.tokenImage));
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) 
   {
      return (R)(new String("true"));
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) 
   {
      return (R)(new String("false"));
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) 
   {
      return (R)(new String(n.f0.tokenImage));
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) 
   {
      return (R)(new String("this"));
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Identifier()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) 
   {
      String arraySize = n.f3.f0.tokenImage;

      if(visit == 2) return (R)(new String("new int[ " + arraySize + " ]"));
      else if(visit == 3)
      {
         InlineCallerInfo info = (InlineCallerInfo)argu;
         String renamedArraySize = getName(info, arraySize);

         return (R)(new String("new int[ " + renamedArraySize + " ]"));
      }

      return null;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) 
   {
      String className = n.f1.f0.tokenImage;

      if(visit == 1) return (R)(new String(className));
      else if(visit == 2 || visit == 3) return (R)(new String("new " + className + "()"));

      return null;
   }

   /**
    * f0 -> "!"
    * f1 -> Identifier()
    */
   public R visit(NotExpression n, A argu) 
   {
      String varName = n.f1.f0.tokenImage;

      if(visit == 2) return (R)(new String("! " + varName));
      else if(visit == 3)
      {
         InlineCallerInfo info = (InlineCallerInfo)argu;
         String renamedVar = getName(info, varName);

         return (R)(new String("! " + renamedVar));
      }

      return null;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    */
   public R visit(DotExpression n, A argu) 
   {
      String varName = n.f0.f0.tokenImage;
      String fieldName = n.f2.f0.tokenImage;

      if(visit == 2) return (R)(varName + "." + fieldName);
      else if(visit == 3)
      {
         InlineCallerInfo info = (InlineCallerInfo)argu;
         String renamedVar = getName(info, varName);

         return (R)(renamedVar + "." + fieldName);
      }

      return null;
   }
}
